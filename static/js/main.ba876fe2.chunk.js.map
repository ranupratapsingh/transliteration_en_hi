{"version":3,"sources":["utils/cache.js","utils/adapter.js","components/EditorContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["cache","CacheManager","Object","classCallCheck","this","localStorage","getItem","JSON","parse","key","val","setItem","stringify","getFromGoogle","_callee","englishString","params","regenerator_default","a","wrap","_context","prev","next","text","ime","num","ie","oe","abrupt","axios","get","stop","getHindiString","_callee2","response","hindi","_context2","sent","data","_unused","console","error","_callee4","englishText","engTextArr","hiTextArrPomise","hiTextArr","hindiText","_context4","split","map","_ref","asyncToGenerator","mark","_callee3","_context3","set","_x4","apply","arguments","Promise","all","join","transliterateEnToHi","EditorContainer","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","that","assertThisInitialized","target","value","then","setState","text2","text1","state","react_default","createElement","Container","Row","className","Col","Form","Control","as","rows","onChange","placeholder","readOnly","Component","App","components_EditorContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba876fe2.chunk.js","sourcesContent":["let cache;\n\nclass CacheManager {\n    constructor() {\n      cache = localStorage.getItem('cache');\n        if(!!cache){\n            this.cache = JSON.parse(cache)\n        } else {\n            this.cache = {};\n        }\n    }\n    set(key, val){\n        this.cache[key] = val;\n        localStorage.setItem('cache', JSON.stringify(this.cache));\n    }\n    get(key){\n        return this.cache[key];\n    }\n}\n\ncache = new CacheManager();\n\nexport default cache;\n","import axios from 'axios';\nimport cache from './cache';\n\nasync function getFromGoogle(englishString){\n  let url = 'https://www.google.com/inputtools/request';\n  let params = {\n    text: englishString,\n    ime:'transliteration_en_hi',\n    num: 5,\n    ie:'utf-8',\n    oe:'utf-8'\n  };\n  return axios.get(url, {params: params});\n}\n\nasync function getHindiString(englishString) {\n  if(!englishString)\n    return englishString;\n  let response = await getFromGoogle(englishString);\n  let hindi;\n  try {\n    hindi = response.data[1][0][1][0];\n  }catch{\n    hindi = '';\n    console.error('some error in getting data');\n  }\n  return hindi;\n}\n\nasync function transliterateEnToHi(englishText){\n  let engTextArr = englishText.split('.');\n  let hiTextArrPomise = engTextArr.map(async (englishText) => {\n    let hindiText;\n    if(!englishText){\n      hindiText = englishText;\n      cache.set(englishText, hindiText);\n    }\n    hindiText = cache.get(englishText);\n    if(!hindiText){\n      hindiText = await getHindiString(englishText);\n      cache.set(englishText, hindiText);\n    }\n    return hindiText;\n  });\n  let hiTextArr = await Promise.all(hiTextArrPomise);\n  let hindiText = await hiTextArr.join('.');\n  return hindiText;\n}\n\nexport default transliterateEnToHi;\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Form } from 'react-bootstrap';\nimport transliterateEnToHi from '../utils/adapter';\n\nclass EditorContainer extends Component {\n  constructor(){\n    super();\n    this.state = {text1: '', text2: ''};\n  }\n  handleChange = (event) => {\n    let that = this;\n    let text = event.target.value;\n    transliterateEnToHi(text).then((hindi) => {\n      that.setState({text2: hindi});\n    });\n    this.setState({text1: text});\n  }\n  render() {\n    return (\n      <Container>\n        <Row className='mt-5'>\n          <Col>\n            <Form.Control as='textarea' rows='25' value={this.state.text1} onChange={this.handleChange} placeholder='yahan likhein ya paste karein...'></Form.Control>\n          </Col>\n          <Col>\n            <Form.Control as='textarea' rows='25' value={this.state.text2} readOnly></Form.Control>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default EditorContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport EditorContainer from './components/EditorContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          English to hindi convertor\n        </header>\n        <EditorContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}